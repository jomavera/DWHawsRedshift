import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')
ARN = config['IAM_ROLE']['ARN']
LOG_DATA = config['S3']['LOG_DATA']
LOG_JSONPATH = config['S3']['LOG_JSONPATH']
SONG_DATA = config['S3']['SONG_DATA']

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs"
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES

staging_events_table_create= ("""
    CREATE TABLE IF NOT EXISTS staging_events (
        artist VARCHAR,
        auth VARCHAR,
        firstName VARCHAR,
        gender VARCHAR,
        iteminSession INTEGER,
        lastName VARCHAR,
        length REAL,
        level VARCHAR,
        location VARCHAR,
        method VARCHAR,
        page VARCHAR,
        registration BIGINT,
        sessionId INTEGER,
        song VARCHAR,
        status INTEGER,
        ts TIMESTAMP,
        userAgent VARCHAR,
        userId INTEGER
    )
""")

staging_songs_table_create = ("""
    CREATE TABLE IF NOT EXISTS staging_songs (
        num_songs INTEGER,
        artist_id VARCHAR,
        artist_latitude REAL,
        artist_longitude REAL,
        artist_location VARCHAR,
        artist_name VARCHAR,
        song_id  VARCHAR,
        title VARCHAR,
        duration REAL,
        year INTEGER
    )
""")

songplay_table_create = ("""
    CREATE TABLE IF NOT EXISTS songplays (
        songplay_id INT GENERATED BY DEFAULT AS IDENTITY ( 0, 1 ) PRIMARY KEY,
        start_time TIMESTAMP,
        user_id INTEGER NOT NULL,
        level VARCHAR,
        song_id VARCHAR,
        artist_id VARCHAR,
        session_id INTEGER,
        location INTEGER,
        user_agent INTEGER
    )
""")

user_table_create = ("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY NOT NULL,
        first_name VARCHAR NOT NULL,
        last_name VARCHAR NOT NULL,
        gender VARCHAR,
        level VARCHAR NOT NULL
    )
""")

song_table_create = ("""
    CREATE TABLE IF NOT EXISTS songs (
        song_id VARCHAR PRIMARY KEY NOT NULL,
        title VARCHAR NOT NULL,
        artist_id VARCHAR NOT NULL,
        year INTEGER,
        duration REAL
    )
""")

artist_table_create = ("""
    CREATE TABLE IF NOT EXISTS artists (
        artist_id VARCHAR PRIMARY KEY NOT NULL,
        name VARCHAR NOT NULL,
        location VARCHAR,
        latitude REAL,
        longitude REAL
    )
""")

time_table_create = ("""
    CREATE TABLE IF NOT EXISTS time (
        start_time TIMESTAMP PRIMARY KEY NOT NULL,
        hour INTEGER,
        day INTEGER,
        week INTEGER,
        month INTEGER,
        year INTEGER,
        weekday VARCHAR
    )
""")

# STAGING TABLES

staging_events_copy = (""" 
    COPY staging_events FROM {}
    iam_role {}
    json {}
    region 'us-west-2'
    TIMEFORMAT 'epochmillisecs'
""").format(LOG_DATA, ARN, LOG_JSONPATH)

staging_songs_copy = (""" 
    COPY staging_songs FROM {}
    iam_role {}
    json 'auto' region 'us-west-2'
""").format(SONG_DATA, ARN)

# FINAL TABLES

songplay_table_insert = ("""
    INSERT INTO songplays (start_time, user_id, level, song_id, artist_id)
    SELECT DISTINCT staging_events.ts AS startime,
           staging_events.userId AS user_id,
           staging_events.level AS level,
           staging_songs.song_id AS song_id,
           staging_songs.artist_id AS artist_id
    FROM (staging_events JOIN staging_songs ON staging_events.artist = staging_songs.artist_name)
""")

user_table_insert = ("""
    INSERT INTO users (user_id, first_name,last_name, gender, level)
    SELECT DISTINCT staging_events.userId AS user_id,
           staging_events.firstName as first_name,
           staging_events.lastName as last_name,
           staging_events.gender as gender,
           staging_events.level AS level
    FROM (staging_events JOIN staging_songs ON staging_events.artist = staging_songs.artist_name)
""")

song_table_insert = ("""
    INSERT INTO songs (song_id, title, artist_id, year, duration)
    SELECT DISTINCT staging_songs.song_id AS song_id,
           staging_events.song AS title,
           staging_songs.artist_id AS artist_id,
           staging_songs.year AS year,
           staging_songs.duration AS duration
    FROM (staging_events JOIN staging_songs ON staging_events.artist = staging_songs.artist_name)
""")

artist_table_insert = ("""
    INSERT INTO artists (artist_id, name, location, latitude, longitude)
    SELECT DISTINCT staging_songs.artist_id AS artist_id,
           staging_songs.artist_name AS name,
           staging_songs.artist_location AS location,
           staging_songs.artist_latitude AS latitude,
           staging_songs.artist_longitude AS longitude
    FROM (staging_events JOIN staging_songs ON staging_events.artist = staging_songs.artist_name)
""")

time_table_insert = ("""
    INSERT INTO time (start_time, hour, day, week, month, year, weekday)
    SELECT DISTINCT staging_events.ts AS startime,
           EXTRACT(hour FROM staging_events.ts) AS hour,
           EXTRACT(day FROM staging_events.ts) AS day,
           EXTRACT(week FROM staging_events.ts) AS week,
           EXTRACT(month FROM staging_events.ts) AS month,
           EXTRACT(year FROM staging_events.ts) AS year,
           EXTRACT(weekday FROM staging_events.ts) AS weekday
    FROM (staging_events JOIN staging_songs ON staging_events.artist = staging_songs.artist_name)
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
